{"version":3,"sources":["logo.svg","components/TodoItem.jsx","components/TodoTab.jsx","components/TodoForm.jsx","services/todoService.js","components/TodoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","onTodoRemoval","onTodoToggle","Item","actions","title","completed","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","onChange","defaultChecked","onConfirm","className","type","danger","color","id","TodoTab","todos","locale","emptyText","dataSource","renderItem","TodoItem","pagination","position","pageSize","TodoForm","onFormSubmit","Form","useForm","form","onFinish","getFieldValue","console","log","resetFields","layout","gutter","xs","sm","md","lg","xl","name","rules","required","message","placeholder","htmlType","block","PlusCircleFilled","baseUrl","process","loadTodos","fetch","then","response","json","TabPane","Tabs","Content","Layout","TodoList","useState","refreshing","setRefreshing","setTodos","activeTodos","setActiveTodos","completedTodos","setCompletedTodos","handleRemoveTodo","method","onRefresh","warn","handleToggleTodoStatus","headers","body","JSON","stringify","updateTodo","info","useCallback","a","data","filter","useEffect","style","padding","span","offset","createTodo","success","defaultActiveKey","tab","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdc02cc7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from \"react\";\nimport { Tooltip, Tag, List, Button, Popconfirm, Switch } from \"antd\";\nimport {CloseOutlined, CheckOutlined} from \"@ant-design/icons\";\n\nconst Todo = ({todo, onTodoRemoval, onTodoToggle}) => {\n\n    return(\n        <List.Item\n            actions={[\n                <Tooltip \n                    title={todo.completed ? \"Mark as not completed\" : \"Mark as completed\"}>\n                    <Switch\n                        checkedChildren={<CheckOutlined/>}\n                        unCheckedChildren={<CloseOutlined/>}\n                        onChange={() => onTodoToggle(todo)}\n                        defaultChecked={todo.completed}\n                    />\n                </Tooltip>,\n                <Popconfirm\n                    title={\"Are you sure you want to delete this todo?\"}\n                    onConfirm={() => {\n                        onTodoRemoval(todo);\n                    }}> \n                        <Button className=\"remove-todo-button\" type=\"primary\" danger>\n                            X \n                        </Button>\n                    </Popconfirm>\n\n            ]}\n            className=\"list-item\"\n            key={todo.id}\n            >\n            <div className=\"todo-item\">\n                <Tag color={todo.completed ? \"green\" : \"red\"} className=\"todo-tag\">\n                    {todo.title}\n                </Tag>\n            </div>\n        </List.Item>\n    )\n\n}\n\nexport default Todo;","import React, { useEffect } from 'react';\nimport { Tabs, Layout, Row, Col, List } from 'antd';\nimport TodoItem from './TodoItem';\n\nconst TodoTab = ({ todos, onTodoRemoval, onTodoToggle }) => {\n    return (\n        <><List\n            locale={{ emptyText: 'No todos' }}\n            dataSource={todos}\n            renderItem={(todo) => (\n                <TodoItem\n                    todo={todo}\n                    onTodoToggle={onTodoToggle}\n                    onTodoRemoval={onTodoRemoval}\n                />\n            )}\n            pagination={{\n                position: 'bottom',\n                pageSize: 10,\n            }}\n        /></>\n    )\n}\n\nexport default TodoTab;","import React from 'react';\nimport { Form, Row, Col, Button, Input } from 'antd';\nimport {PlusCircleFilled} from '@ant-design/icons';\nimport { render } from '@testing-library/react';\n\nconst TodoForm = ({onFormSubmit}) => {\n    const [form] = Form.useForm();\n\n    const onFinish = () => {\n        onFormSubmit({\n            title: form.getFieldValue('title'),\n            completed: false\n        });\n        console.log(form.getFieldValue('title'));\n\n        form.resetFields();\n    }\n    \n    return(\n        <Form\n            form={form}\n            onFinish={onFinish}\n            layout=\"horizontal\"\n            className=\"todo-form\">\n            <Row gutter={20}>\n                <Col xs={24} sm={24} md={17} lg={19} xl={20}>  \n                    <Form.Item\n                        name=\"title\"\n                        rules={[{ required: true, message: 'Please input your todo!' }]}>\n                        <Input placeholder=\"What needs to be done?\" />\n                    </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={7} lg={5} xl={4}>\n                    <Button type=\"primary\" htmlType=\"submit\" block>\n                    <PlusCircleFilled />\n                        Add Todo  \n                    </Button>\n                </Col>\n            </Row>\n        </Form>\n            \n    );\n}\n\nexport default TodoForm;","const baseUrl = `${process.env.REACT_APP_API_URL}/tasks`;\n\nexport const loadTodos = () => {\n  return fetch(baseUrl).then((response) => response.json());\n    // .then(todos => todos);\n  }\n\nexport const getTodo = (id) => {\n  return fetch(`${baseUrl}/${id}`).then((response) => response.json());\n}\n\nexport const createTodo = (todo) => {\n  return fetch(baseUrl, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n        title: todo.title,\n        completed: todo.completed\n    }),\n  }).then(response => response.json());\n};\n\nexport const updateTodo = (todo) => {\n  return fetch(`${baseUrl}/${todo.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        id: todo.id,\n        title: todo.title,\n        completed: todo.completed\n    }),\n  }).then(response => response.json());\n};\n\nexport const deleteTodo = (id) => {\n    return fetch(`${baseUrl}/${id}`, {\n        method: 'DELETE',\n    }).then(response => response.json());\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport { Tabs, Layout, Row, Col, Input, message } from 'antd';\nimport './TodoList.css';\nimport TodoTab from './TodoTab';\nimport TodoForm from './TodoForm';\nimport { createTodo, deleteTodo, loadTodos, updateTodo } from '../services/todoService';\nconst { TabPane } = Tabs;\nconst { Content } = Layout;\n\nconst TodoList = () => {\n    const [refreshing, setRefreshing] = useState(false);\n    const [todos, setTodos] = useState([]);\n    const [activeTodos, setActiveTodos] = useState([]);\n    const [completedTodos, setCompletedTodos] = useState([]);\n\n    const handleFormSubmit = (todo) => {\n        console.log('Todo being created', todo);\n        createTodo(todo).then(onRefresh());\n        message.success('Todo created successfully');\n    }\n\n    const handleRemoveTodo = (todo) => {\n        deleteTodo(todo.id).then(onRefresh());\n        message.warn('Todo deleted successfully');\n    }\n\n    const handleToggleTodoStatus = (todo) => {\n        todo.completed = !todo.completed;\n        updateTodo(todo).then(onRefresh());\n        message.info('Todo updated successfully');\n    }\n\n    const refresh = () => {\n        loadTodos()\n            .then(json => {\n                setTodos(json);\n                setActiveTodos(json.filter(todo => todo.completed === false));\n                setCompletedTodos(json.filter(todo => todo.completed === true));\n            }).then(console.log('Todos refreshed'));\n    }\n    const onRefresh = useCallback(async () => {\n        setRefreshing(true);\n        let data = await loadTodos;\n        setTodos(data);\n        setActiveTodos(data.filter(todo => todo.completed === false));\n        setCompletedTodos(data.filter(todo => todo.completed === true));\n        setRefreshing(false);\n        console.log('Refresh state', refreshing);\n    }, [refreshing]);\n\n    useEffect(() => {\n        refresh();\n    }, [onRefresh])\n\n    return (\n        <Layout className=\"layout\">\n            <Content style={{ padding: '0 50px' }}>\n                <div className=\"todoList\">\n                    <Row>\n                        <Col span={14} offset={5}>\n                            <h1>Ensolvers Todo List</h1>\n                            <TodoForm onFormSubmit={handleFormSubmit} />\n                            <br />\n                            <Tabs defaultActiveKey=\"all\">\n                                <TabPane tab=\"All\" key=\"all\">\n                                    <TodoTab todos={todos} onTodoToggle={handleToggleTodoStatus} onTodoRemoval={handleRemoveTodo} />\n                                </TabPane>\n                                <TabPane tab=\"Active\" key=\"active\">\n                                    <TodoTab todos={activeTodos} onTodoToggle={handleToggleTodoStatus} onTodoRemoval={handleRemoveTodo} />\n                                </TabPane>\n                                <TabPane tab=\"Complete\" key=\"complete\">\n                                    <TodoTab todos={completedTodos} onTodoToggle={handleToggleTodoStatus} onTodoRemoval={handleRemoveTodo} />\n                                </TabPane>\n                            </Tabs>\n                        </Col>\n                    </Row>\n                </div>\n            </Content>\n        </Layout>\n    )\n}\n\nexport default TodoList;","import logo from './logo.svg';\nimport './App.css';\nimport {Button} from 'antd';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}